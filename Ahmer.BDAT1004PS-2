{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5fe70cca",
   "metadata": {},
   "source": [
    "Question 1: What value is displayed when last expression (a) is evaluated ? Explain your answer by indicating what happens in every executed statement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e0f2e05f",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 0\n",
    "\n",
    "def b():\n",
    "    global a\n",
    "    a = c(a)\n",
    "    \n",
    "def c(a):\n",
    "    return a + 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f2ebd769",
   "metadata": {},
   "outputs": [],
   "source": [
    "b()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1b354309",
   "metadata": {},
   "outputs": [],
   "source": [
    "b()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "447da787",
   "metadata": {},
   "outputs": [],
   "source": [
    "b()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2d6e0a9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15f30b98",
   "metadata": {},
   "source": [
    "Explination: Since we have defined variable \"a\" as a global variable, its value is initially 0 when function b() is called. Then, when it enters function c, it will return 0+2=2, which is the result of the primary function b. Therefore, the value of \"a\" will now be taken as 2 rather than 0 when we call function b() a second time. Therefore, this time, when function c(a) is executed, it will return the number 4. Function c(a) will also return 6, similarly. Because of this, the output for \"a\" is 6 instead."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70bea5d3",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "151e058d",
   "metadata": {},
   "source": [
    "Question 2:Function fileLength(), given to you, takes the name as input and returns the length of the file. Modify function fileLength() so that a friendly message is printed instead"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "15eee859",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "File idterm.py not found.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "def fileLength(fLenName):\n",
    "    try:\n",
    "        file = open(fLenName, 'r')\n",
    "        print(len(file.readlines()))\n",
    "\n",
    "    except OSError as e:\n",
    "        print(\"File \" + fLenName + \" not found.\")\n",
    "\n",
    "fileLength(\"midterm.py\")\n",
    "fileLength(\"idterm.py\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55a22169",
   "metadata": {},
   "source": [
    "Question 3: Write a class Marsupial that can be used as below. Now write a class named as Kangaroo as a subclass of Marsupial that inherits all the attributes of Marsupial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "68907b61",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Marsupial:\n",
    "    def __init__(self):\n",
    "        self.pouch = []\n",
    "\n",
    "    def put_in_pouch(self, put):\n",
    "        self.pouch.append(put)\n",
    "\n",
    "    def pouch_contents(self):\n",
    "        print(self.pouch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b7c87898",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['doll', 'firetruck', 'kitten']\n"
     ]
    }
   ],
   "source": [
    "m = Marsupial()\n",
    "\n",
    "m.put_in_pouch(\"doll\")\n",
    "m.put_in_pouch(\"firetruck\")\n",
    "m.put_in_pouch(\"kitten\")\n",
    "m.pouch_contents()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d6375e86",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Kangaroo(Marsupial):\n",
    "    def __init__(self, a, b):\n",
    "        super().__init__()\n",
    "        self.axisa = a\n",
    "        self.axisb = b\n",
    "\n",
    "    def jump(self, da, db):\n",
    "        self.axisa = self.axisa + da\n",
    "        self.axisb = self.axisb + db\n",
    "\n",
    "    def __str__(self):\n",
    "        print(\"I am a Kangaroo located at coordinates (\",self.axisa,\",\",self.axisb,\")\")\n",
    "        return \" \""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "656eb9e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am a Kangaroo located at coordinates ( 0 , 0 )\n",
      " \n",
      "['doll', 'firetruck', 'kitten']\n",
      "I am a Kangaroo located at coordinates ( 3 , 0 )\n",
      " \n"
     ]
    }
   ],
   "source": [
    "k = Kangaroo(0,0)\n",
    "print(k)\n",
    "k.put_in_pouch(\"doll\")\n",
    "k.put_in_pouch(\"firetruck\")\n",
    "k.put_in_pouch(\"kitten\")\n",
    "k.pouch_contents()\n",
    "k.jump(1, 0)\n",
    "k.jump(1, 0)\n",
    "k.jump(1, 0)\n",
    "print(k)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c0b2f53",
   "metadata": {},
   "source": [
    "Question 4: Write function collatz() that takes a positive integer x as input and prints the Collatz sequence starting at x. Your function should stop when the sequence gets to number 1. Your implementation must be recursive, without any loops."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "97e57d9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "binary = 1\n",
    "def collatz(binNum):\n",
    "    if binNum == 1:\n",
    "        print(1)\n",
    "    else:\n",
    "        global binary\n",
    "        if binary == 1:\n",
    "            binary = 0\n",
    "            print(binNum)\n",
    "            collatz(binNum)\n",
    "        else:\n",
    "            if binNum != 1:\n",
    "                if binNum % 2 == 0:\n",
    "                    binNum = binNum / 2\n",
    "                    if binNum != 1:\n",
    "                        print(int(binNum))\n",
    "                    collatz(binNum)\n",
    "                else:\n",
    "                    binNum = 3 * binNum + 1\n",
    "                    print(int(binNum))\n",
    "                    collatz(binNum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "66dc9c14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "collatz(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6c8a34fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "5\n",
      "16\n",
      "8\n",
      "4\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "collatz(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec2e22c1",
   "metadata": {},
   "source": [
    "Question 5: Write a recursive method binary() that takes a non-negative integer n and prints the binary representation of integer n."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2d049b47",
   "metadata": {},
   "outputs": [],
   "source": [
    "def binary(binNum):\n",
    "    if binNum < 0:\n",
    "        return 'The number should be a positive integer'\n",
    "    if binNum == 0:\n",
    "        return 0\n",
    "    else:\n",
    "        return (binNum % 2 + 10 * binary(int(binNum // 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f2f18778",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'The number should be a positive integer'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary(-23)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d851136e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "695f5b97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b9a1ac11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "24962882",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1001"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary(9)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c597ca79",
   "metadata": {},
   "source": [
    "Question 6. Implement class Name headingParser that can be used as an HTML document,retrieve and print all the header documents "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ab168388",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W3C Mission\n",
      "\n",
      "\t\n",
      " Principles\n",
      " \n",
      " \n",
      "\n",
      "\n",
      "\n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "from html.parser import HTMLParser\n",
    "class HeadingParser(HTMLParser):\n",
    "\n",
    "    def handle_starttag(self, tag, attrs):\n",
    "\n",
    "        global majorCounter\n",
    "        matchedRegex = re.match(r'h(\\d)', tag, re.I)\n",
    "        if matchedRegex: majorCounter = int(matchedRegex.group(1))\n",
    "\n",
    "    def handle_endtag(self, tag):\n",
    "        matchedRegex = re.match(r'h(\\d)', tag, re.I)\n",
    "        if matchedRegex: majorCounter = 0\n",
    "\n",
    "    def handle_data(self, data):\n",
    "        if majorCounter > 0:\n",
    "            indented_Block = majorCounter - 1\n",
    "            out = \" \" * indented_Block\n",
    "            print(out + data)\n",
    "\n",
    "infile = open('w3c.html')\n",
    "content = infile.read()\n",
    "infile.close()\n",
    "majorCounter = 0\n",
    "hp = HeadingParser()\n",
    "hp.feed(content)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08c35ea3",
   "metadata": {},
   "source": [
    "Question 7. Implement recursive function webDir() that takes input url as a string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "14821082",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://reed.cs.depaul.edu/lperkovic/csc242/test1.html\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup   \n",
    "\n",
    "def webdir(checkedUrl, depth, indentation_required):\n",
    "    resp = requests.get(checkedUrl)\n",
    "    print(checkedUrl)\n",
    "    if(depth == indentation_required):\n",
    "        return\n",
    "    soup = BeautifulSoup(resp.text, 'html.parser')  \n",
    "    for link_sorted in soup.findAll('a'):\n",
    "        link_sorted = link_sorted.get('href')\n",
    "        if(link_sorted.startswith('https')):\n",
    "            webdir(link_sorted, depth, indentation_required+1)\n",
    "\n",
    "webdir('http://reed.cs.depaul.edu/lperkovic/csc242/test1.html', 2, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fe3cc3e",
   "metadata": {},
   "source": [
    "Question 8: Write SQL queries on the below database table that return:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9a0c8eb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1e90bfcdf10>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sqlite3\n",
    "con = sqlite3.connect('AHMER.db')\n",
    "cur = con.cursor()\n",
    "cur.execute(\"create table WEATHER_COUT (City text, Country text, Season text, Temperature float, Rainfall float)\")\n",
    "\n",
    "State_Wise_Climate = [\n",
    "    ('Mumbai','India', 'Winter','24.8', '5.9'),\n",
    "    ('Mumbai','India', 'Spring','28.4', '16.2'),\n",
    "    ('Mumbai','India', 'Summer','27.9', '1549.4'),\n",
    "    ('Mumbai','India', 'Fall','27.6', '346.0'),\n",
    "    ('London','United Kingdom', 'Winter','4.2', '207.7'),\n",
    "    ('London','United Kingdom', 'Spring','8.3', '169.6'),\n",
    "    ('London','United Kingdom', 'Summer','15.7', '157.0'),\n",
    "    ('London','United Kingdom', 'Fall','10.4', '218.5'),\n",
    "    ('Cairo','Egypt', 'Winter','13.6', '16.5'),\n",
    "    ('Cairo','Egypt', 'Spring','20.7', '6.5'),\n",
    "    ('Cairo','Egypt', 'Summer','27.7', '0.1'),\n",
    "    ('Cairo','Egypt', 'Fall','22.2', '4.5')\n",
    "]\n",
    "cur.executemany(\"insert into WEATHER_COUT values (?, ?, ?, ?, ?)\", State_Wise_Climate)\n",
    "con.commit()\n",
    "cur.execute(\"select Season from WEATHER_COUT\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3fe9cd1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Winter',)\n",
      "('Spring',)\n",
      "('Summer',)\n",
      "('Fall',)\n",
      "('Winter',)\n",
      "('Spring',)\n",
      "('Summer',)\n",
      "('Fall',)\n",
      "('Winter',)\n",
      "('Spring',)\n",
      "('Summer',)\n",
      "('Fall',)\n"
     ]
    }
   ],
   "source": [
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "57630da1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(24.8,)\n",
      "(28.4,)\n",
      "(27.9,)\n",
      "(27.6,)\n",
      "(4.2,)\n",
      "(8.3,)\n",
      "(15.7,)\n",
      "(10.4,)\n",
      "(13.6,)\n",
      "(20.7,)\n",
      "(27.7,)\n",
      "(22.2,)\n"
     ]
    }
   ],
   "source": [
    "cur.execute(\"select Temperature from WEATHER_COUT\")\n",
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "39ae5f35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Mumbai',)\n",
      "('London',)\n",
      "('Cairo',)\n"
     ]
    }
   ],
   "source": [
    "cur.execute(\"select DISTINCT City from WEATHER_COUT\")\n",
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "57985567",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Mumbai', 'India', 'Winter', 24.8, 5.9)\n",
      "('Mumbai', 'India', 'Spring', 28.4, 16.2)\n",
      "('Mumbai', 'India', 'Summer', 27.9, 1549.4)\n",
      "('Mumbai', 'India', 'Fall', 27.6, 346.0)\n"
     ]
    }
   ],
   "source": [
    "cur.execute(\"select * from WEATHER_COUT where Country='India'\")\n",
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fed07895",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Mumbai', 'India', 'Fall', 27.6, 346.0)\n",
      "('London', 'United Kingdom', 'Fall', 10.4, 218.5)\n",
      "('Cairo', 'Egypt', 'Fall', 22.2, 4.5)\n"
     ]
    }
   ],
   "source": [
    "cur.execute(\"select * from WEATHER_COUT where Season='Fall'\")\n",
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "6d9ab941",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('London', 'United Kingdom', 'Winter', 207.7)\n",
      "('London', 'United Kingdom', 'Fall', 218.5)\n",
      "('Mumbai', 'India', 'Fall', 346.0)\n"
     ]
    }
   ],
   "source": [
    "cur.execute(\"SELECT  City, Country, Season, AVG(Rainfall) FROM WEATHER_COUT GROUP BY Rainfall Having AVG(Rainfall) BETWEEN 200 AND 400;\")\n",
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e7dc8094",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Cairo', 'Egypt', 22.2)\n",
      "('Mumbai', 'India', 27.6)\n"
     ]
    }
   ],
   "source": [
    "cur.execute(\"select City, Country, AVG(Temperature) FROM WEATHER_COUT WHERE Season = 'Fall' group by Temperature HAVING AVG(Temperature) > 20\")\n",
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c6306494",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Cairo', 27.6)\n"
     ]
    }
   ],
   "source": [
    "cur.execute(\"select City, SUM(Rainfall) FROM WEATHER_COUT where City='Cairo'\")\n",
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "04277065",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Fall', 569.0)\n",
      "('Spring', 192.29999999999998)\n",
      "('Summer', 1706.5)\n",
      "('Winter', 230.1)\n"
     ]
    }
   ],
   "source": [
    "cur.execute(\"select Season, SUM(Rainfall) FROM WEATHER_COUT group by Season\")\n",
    "for weather_repDisplay in cur:\n",
    "    print(weather_repDisplay)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d2c708f",
   "metadata": {},
   "source": [
    "Question 9. Write list iterations for a given set of string values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "aaecf514",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Part 1 Output: \n",
      "['THE', 'QUICK', 'BROWN', 'FOX', 'JUMPS', 'OVER', 'THE', 'LAZY', 'DOG']\n",
      "\n",
      "Part 2 Output: \n",
      "['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n",
      "\n",
      "Part 3 Output: \n",
      "[3, 5, 5, 3, 5, 4, 3, 4, 3]\n",
      "\n",
      "Part 4 Output: \n",
      "[['THE', 'the', 3], ['QUICK', 'quick', 5], ['BROWN', 'brown', 5], ['FOX', 'fox', 3], ['JUMPS', 'jumps', 5], ['OVER', 'over', 4], ['THE', 'the', 3], ['LAZY', 'lazy', 4], ['DOG', 'dog', 3]]\n",
      "\n",
      "Part 5 Output: \n",
      "['quick', 'brown', 'jumps', 'over', 'lazy']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "words = [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n",
    "\n",
    "# Capital Case Letters\n",
    "capitalOutput = [word.upper() for word in words]\n",
    "print(\"Part 1 Output: \")\n",
    "print(capitalOutput)\n",
    "print()\n",
    "\n",
    "\n",
    "# Lower case Letters\n",
    "\n",
    "smallOutput = [word.lower() for word in words]\n",
    "print(\"Part 2 Output: \")\n",
    "print(smallOutput)\n",
    "print()\n",
    "\n",
    "# Length\n",
    "sizes = []\n",
    "for count in words:\n",
    "    sizes.append(len(count))  \n",
    "print(\"Part 3 Output: \")\n",
    "print(sizes)\n",
    "print()\n",
    "\n",
    "# Combine\n",
    "count = 0\n",
    "combineSingle = []\n",
    "\n",
    "for word in words:\n",
    "    combineSingle.append(capitalOutput[count])\n",
    "    combineSingle.append(smallOutput[count])\n",
    "    combineSingle.append(sizes[count])\n",
    "    count = count + 1\n",
    "\n",
    "delimiter_per_space = 3\n",
    "final_resultant = [combineSingle[additor:additor+delimiter_per_space] for additor in range(0, len(combineSingle), delimiter_per_space)]\n",
    "print(\"Part 4 Output: \")\n",
    "print(final_resultant)\n",
    "print()\n",
    "\n",
    "# list of words containing 4 or more characters\n",
    "words = [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n",
    "listWord = []\n",
    "for word in words:\n",
    "    count = 0\n",
    "    if len(word) >= 4:\n",
    "        listWord.append(word)\n",
    "    count = count + 1\n",
    "print(\"Part 5 Output: \")\n",
    "print(listWord)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df4c225c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
